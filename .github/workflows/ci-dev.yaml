name: CI-Dev
on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ main ]
jobs:
  TestLint:
    name: TestLint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup Python Version
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Create & Start Virtual Environment
      run: |
        python3 -m venv venv
        source venv/bin/activate

    - name: Install Dependencies
      run: pip install -r requirements.txt

    - name: Run Lint
      run: pylint --fail-under=9 app.py

    - name: Run Test
      run: pytest 
  Release:
    name: Create Release
    needs: [TestLint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      with:
        semantic_version: 19.0.5
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/git
          @semantic-release/exec
          conventional-changelog-eslint
        branches: |
          ['main']
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  Build:
    needs: [Release]
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: octokit/graphql-action@v2.x
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      id: get_latest_release
      with:
        owner: ${{ github.actor }}
        repo: ${{ github.event.repository.name }}
        query: |
          query tag($owner:String!, $repo:String!) {
            repository(owner:$owner, name:$repo){
              refs(refPrefix:"refs/tags/", last: 1) {
                edges {
                  node {
                    name
                  }
                }
              }
            }
          }

    - name: Get Current Tag Name
      id: get_tag
      run: echo "CurrentTag=$(echo '${{ steps.get_latest_release.outputs.data }}' | jq -r '.repository.refs.edges[].node.name')" >> $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/whoapp:${{ env.CurrentTag }} 

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/whoapp:${{ env.CurrentTag }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'
